/*
	Your Name
	CS 271
	VM I

	Notes:	Read my comments. Feel free to delete them after you read them.
			Do plan to worry about processing comments in the input file.
			Comment and error checking doesn't need to be perfect, but should
			exist.
*/

#include <stdio.h> 	//for I/O
#include <string.h> //for strlen
#include <stdlib.h> //for malloc and free

/*
	getToken takes a string and a position in that string
	It should read from the position to a space or the end of the string
	It should then return a string containing what it read

	Example:
	getToken("push constant 42", 0); would return push
	getToken("push constant 42", 5); would return constant
*/
char* getToken(char*, int);

/*
	processLine takes a string, breaks it into tokens, and calls the
    appropriate processing function, either arithmetic or memory
	It should return a string containing assembly code
	The result of this function is what should be written to your output file.
*/
char* processLine(char*); 

//Arithmetic Commands
char* add(); 	//return the assembly for add
char* sub(); 	//return the assembly for sub
char* neg(); 	//return the assembly for neg
char* eq(); 	//return the assembly for eq
char* gt(); 	//return the assembly for gt
char* lt();		//return the assembly for lt
char* and();	//return the assembly for and	
char* or();		//return the assembly for or
char* not();	//return the assembly for not
char* arithmetic(char*); //given a command, call the appropriate function above

//Memory Commands
char* pop(char*,char*);		//return the assembly for pop
char* push(char*, char*); 	//return the assembly for push
char* memory(char*, char*, char*);	//given a command, call push or pop

int main(){
	//I would work on the Assembly functions first
	//Then I would work on getToken
	//Then work on processLine
	//Then worry about file I/O.

	return 0;
}

//You should write your functions down here
